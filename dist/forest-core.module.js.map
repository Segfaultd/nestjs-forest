{"version":3,"file":"forest-core.module.js","sourceRoot":"/","sources":["forest-core.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,2CAA+E;AAE/E,yDAAyE;AAEzE,yDAA2D;AAC3D,qDAAiD;AAI1C,IAAM,gBAAgB,wBAAtB,MAAM,gBAAgB;IAClB,MAAM,CAAC,OAAO,CAAC,OAA4B;QAC9C,MAAM,QAAQ,GAAG,IAAA,wCAAqB,EAAC,OAAO,CAAC,CAAC;QAEhD,OAAO;YACH,OAAO,EAAE,CAAC,QAAQ,EAAE,8BAAa,CAAC;YAClC,MAAM,EAAE,kBAAgB;YACxB,SAAS,EAAE,CAAC,QAAQ,EAAE,8BAAa,CAAC;SACvC,CAAC;IACN,CAAC;IAEM,MAAM,CAAC,YAAY,CAAC,OAAiC;QACxD,MAAM,QAAQ,GAAa;YACvB,MAAM,EAAE,CAAC,wCAAqB,CAAC;YAC/B,OAAO,EAAE,+BAAY;YACrB,UAAU,EAAE,CAAC,OAA4B,EAAE,EAAE,CAAC,IAAI,8BAAa,CAAC,OAAO,CAAC;SAC3E,CAAC;QAEF,OAAO;YACH,OAAO,EAAE,CAAC,QAAQ,EAAE,8BAAa,CAAC;YAClC,OAAO,EAAE,OAAO,CAAC,OAAO;YACxB,MAAM,EAAE,kBAAgB;YACxB,SAAS,EAAE,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,8BAAa,CAAC;SAC9E,CAAC;IACN,CAAC;IAEO,MAAM,CAAC,oBAAoB,CAAC,OAAiC;QACjE,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;YAC5C,OAAO,CAAC,IAAI,CAAC,2BAA2B,CAAC,OAAO,CAAC,CAAC,CAAC;QACvD,CAAC;QACD,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAsC,CAAC;QAChE,OAAO;YACH,IAAI,CAAC,2BAA2B,CAAC,OAAO,CAAC;YACzC;gBACI,OAAO,EAAE,QAAQ;gBACjB,QAAQ;aACX;SACJ,CAAC;IACN,CAAC;IAEO,MAAM,CAAC,2BAA2B,CAAC,OAAiC;QACxE,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;YACrB,OAAO;gBACH,MAAM,EAAE,OAAO,CAAC,MAAM,IAAI,EAAE;gBAC5B,OAAO,EAAE,wCAAqB;gBAC9B,UAAU,EAAE,OAAO,CAAC,UAAU;aACjC,CAAC;QACN,CAAC;QACD,MAAM,MAAM,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,WAAW,CAA+B,CAAC,CAAC;QACzF,OAAO;YACH,OAAO,EAAE,wCAAqB;YAC9B,UAAU,EAAE,CAAO,cAAoC,EAAE,EAAE,gDAAC,OAAA,MAAM,cAAc,CAAC,yBAAyB,EAAE,CAAA,GAAA;YAC5G,MAAM;SACT,CAAC;IACN,CAAC;CACJ,CAAA;AAvDY,4CAAgB;2BAAhB,gBAAgB;IAF5B,IAAA,eAAM,GAAE;IACR,IAAA,eAAM,EAAC,EAAE,CAAC;GACE,gBAAgB,CAuD5B","sourcesContent":["import { DynamicModule, Global, Module, Provider, Type } from '@nestjs/common';\n\nimport { FOREST_MODULE_OPTIONS, FOREST_TOKEN } from './forest.constants';\nimport { ForestModuleAsyncOptions, ForestModuleOptions, ForestOptionsFactory } from './forest.interfaces';\nimport { createForestProviders } from './forest.providers';\nimport { ForestService } from './forest.service';\n\n@Global()\n@Module({})\nexport class ForestCoreModule {\n    public static forRoot(options: ForestModuleOptions): DynamicModule {\n        const provider = createForestProviders(options);\n\n        return {\n            exports: [provider, ForestService],\n            module: ForestCoreModule,\n            providers: [provider, ForestService],\n        };\n    }\n\n    public static forRootAsync(options: ForestModuleAsyncOptions): DynamicModule {\n        const provider: Provider = {\n            inject: [FOREST_MODULE_OPTIONS],\n            provide: FOREST_TOKEN,\n            useFactory: (options: ForestModuleOptions) => new ForestService(options),\n        };\n\n        return {\n            exports: [provider, ForestService],\n            imports: options.imports,\n            module: ForestCoreModule,\n            providers: [...this.createAsyncProviders(options), provider, ForestService],\n        };\n    }\n\n    private static createAsyncProviders(options: ForestModuleAsyncOptions): Provider[] {\n        if (options.useExisting || options.useFactory) {\n            return [this.createAsyncOptionsProviders(options)];\n        }\n        const useClass = options.useClass as Type<ForestOptionsFactory>;\n        return [\n            this.createAsyncOptionsProviders(options),\n            {\n                provide: useClass,\n                useClass,\n            },\n        ];\n    }\n\n    private static createAsyncOptionsProviders(options: ForestModuleAsyncOptions): Provider {\n        if (options.useFactory) {\n            return {\n                inject: options.inject || [],\n                provide: FOREST_MODULE_OPTIONS,\n                useFactory: options.useFactory,\n            };\n        }\n        const inject = [(options.useClass || options.useExisting) as Type<ForestOptionsFactory>];\n        return {\n            provide: FOREST_MODULE_OPTIONS,\n            useFactory: async (optionsFactory: ForestOptionsFactory) => await optionsFactory.createForestModuleOptions(),\n            inject,\n        };\n    }\n}\n"]}