{"version":3,"file":"forest.service.js","sourceRoot":"/","sources":["forest.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAAsE;AAEtE,8CAAwD;AAExD,yDAA2D;AAIpD,IAAM,aAAa,qBAAnB,MAAM,aAAa;IAMtB,YAA2C,IAAmC;QAA1B,SAAI,GAAJ,IAAI,CAAsB;QAHtE,SAAI,GAA4B,IAAI,CAAC;QAC5B,WAAM,GAAiB,IAAI,CAAC;QAGzC,IAAI,CAAC,IAAI,EAAE,CAAC;YACR,OAAO;QACX,CAAC;QAGD,MAAM,EAAE,WAAW,KAAmB,IAAI,EAAlB,SAAS,UAAK,IAAI,EAApC,eAA6B,CAAO,CAAC;QAG3C,IAAI,CAAC,MAAM,GAAG,IAAA,mBAAW,EAAC,SAAS,CAAC,CAAC;QAGrC,IAAG,WAAW,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAC,CAAC;YACtC,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE,CAAC;gBACnC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;YACxD,CAAC;QACL,CAAC;IACL,CAAC;IAED,MAAM,CAAC,qBAAqB;QACxB,IAAI,CAAC,eAAa,CAAC,eAAe,EAAE,CAAC;YACjC,eAAa,CAAC,eAAe,GAAG,IAAI,eAAa,EAAE,CAAC;QACxD,CAAC;QACD,OAAO,eAAa,CAAC,eAAe,CAAC;IACzC,CAAC;IAED,IAAI,KAAK;QACL,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAED,MAAM,CAAC,GAAqB;QACxB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,IAAG,IAAI,CAAC,KAAK,EAAC,CAAC;YACX,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxC,CAAC;IACL,CAAC;IAEK,KAAK;;YACP,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;gBACd,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;YAClE,CAAC;YAED,IAAG,CAAC,IAAI,CAAC,IAAI,EAAC,CAAC;gBACX,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;YACxE,CAAC;YAED,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QAC7B,CAAC;KAAA;IAEK,IAAI;;YACN,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;gBACd,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;YAClE,CAAC;YACD,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QAC5B,CAAC;KAAA;CACJ,CAAA;AA7DY,sCAAa;wBAAb,aAAa;IADzB,IAAA,mBAAU,GAAE;IAOI,WAAA,IAAA,eAAM,EAAC,wCAAqB,CAAC,CAAA;;GANjC,aAAa,CA6DzB","sourcesContent":["import { INestApplication, Inject, Injectable } from \"@nestjs/common\";\n\nimport { Agent, createAgent } from '@forestadmin/agent';\n\nimport { FOREST_MODULE_OPTIONS } from './forest.constants';\nimport { ForestModuleOptions } from './forest.interfaces';\n\n@Injectable()\nexport class ForestService {\n    static serviceInstance: ForestService;\n\n    private _app: INestApplication | null = null;\n    private readonly _agent: Agent | null = null;\n\n    constructor(@Inject(FOREST_MODULE_OPTIONS) readonly opts?: ForestModuleOptions) {\n        if (!opts) {\n            return;\n        }\n\n        // Destructure the options to extract the datasources to bind later one\n        const { datasources, ...agentOpts } = opts;\n\n        // Initialize our agent\n        this._agent = createAgent(agentOpts);\n\n        // Bind the datasources\n        if(datasources && datasources.length > 0){\n            for (const datasource of datasources) {\n                this._agent = this._agent.addDataSource(datasource);\n            }\n        }\n    }\n\n    static ForestServiceInstance(): ForestService {\n        if (!ForestService.serviceInstance) {\n            ForestService.serviceInstance = new ForestService();\n        }\n        return ForestService.serviceInstance;\n    }\n\n    get agent(): Agent | null {\n        return this._agent;\n    }\n\n    setApp(app: INestApplication): void {\n        this._app = app;\n        if(this.agent){\n            this.agent.mountOnNestJs(this._app);\n        }\n    }\n\n    async start(): Promise<void> {\n        if (!this.agent) {\n            throw new Error('Forest Agent instance is null or undefined');\n        }\n\n        if(!this._app){\n            throw new Error('NestJs application instance is null or undefined');\n        }\n\n        await this.agent.start();\n    }\n\n    async stop(): Promise<void> {\n        if (!this.agent) {\n            throw new Error('Forest Agent instance is null or undefined');\n        }\n        await this.agent.stop();\n    }\n}\n"]}